var data = {	classes: ['Practice', 'User', 'Physician', 'Manufacturer', 'Payer', 'Patient', 'Assay', 'DeviceModel', 'Device'],	Practice: [		{			ID: generateUUID(),			name: 'Houston Primary Care Associates, LLC',			salesTaxRate: 0.075		}	],	User: [		{			ID: generateUUID(),			username: 'leo3',			practice: 0		},		{			ID: generateUUID(),			username: 'dev',			practice: 0		},		{			ID: generateUUID(),			username: 'atul',			practice: 0		},		{			ID: generateUUID(),			username: 'mark',			practice: 0		},		{			ID: generateUUID(),			username: 'john',			practice: 0		}	],	Physician: [		{			ID: generateUUID(),			firstName: 'Leo',			middleName: 'Edward',			lastName: 'Linbeck',			suffix: 'III',			practice: 0,			user: 0		},		{			ID: generateUUID(),			firstName: 'Dev',			middleName: '',			lastName: 'Chatterjee',			suffix: '',			practice: 0,			user: 1		},		{			ID: generateUUID(),			firstName: 'Atul',			middleName: '',			lastName: 'Varadhachary',			suffix: '',			practice: 0,			user: 2		}	],	Manufacturer: [		{			ID: generateUUID(),			name: 'Ansh Diagnostics, Inc.',			technicalPerson: 'Peter Jackson',			orderingPerson: 'Sean Astin'		},		{			ID: generateUUID(),			name: 'Ray Biotech, Inc.',			technicalPerson: 'Phillipa Boyens',			orderingPerson: 'Elijah Wood'		},		{			ID: generateUUID(),			name: 'Lumigen, Inc.',			technicalPerson: 'Fran Walsh',			orderingPerson: 'Cate Blanchett'		},		{			ID: generateUUID(),			name: 'Covidien Ltd.',			technicalPerson: 'Barrie Osborne',			orderingPerson: 'Viggo Mortenson'		},		{			ID: generateUUID(),			name: 'PerkinElmer, Inc.',			technicalPerson: 'Andrew Lesnie',			orderingPerson: 'Liv Tyler'		},		{			ID: generateUUID(),			name: 'Baxter International, Inc.',			technicalPerson: 'Howard Shore',			orderingPerson: 'Ian McKellen'		},		{			ID: generateUUID(),			name: 'Arbor Assays, Inc.',			technicalPerson: 'Grant Major',			orderingPerson: 'Orlando Bloom'		},		{			ID: generateUUID(),			name: 'Becton, Dickinson and Co.',			technicalPerson: 'Richard Taylor',			orderingPerson: 'Andy Serkis'		}	],	Payer: [		{			ID: generateUUID(),			name: 'Blue Cross Blue Shield of Texas',			type: 'Insurance Company',			billingPerson: 'Christopher Lee'		},		{			ID: generateUUID(),			name: 'Blue Cross Blue Shield of Oklahoma',			type: 'Insurance Company',			billingPerson: 'Jed Brophy'		},		{			ID: generateUUID(),			name: 'CIGNA',			type: 'Insurance Company',			billingPerson: 'Craig Parker'		},		{			ID: generateUUID(),			name: 'Center for Medicare and Medicaid Services',			type: 'Medicare',			billingPerson: 'John Noble'		},		{			ID: generateUUID(),			name: 'Texas Department of Health and Human Services',			type: 'Medicaid',			billingPerson: 'Sala Baker'		},		{			ID: generateUUID(),			name: 'Sean Bean',			type: 'Credit Card',			billingPerson: 'Sean Bean'		},		{			ID: generateUUID(),			name: 'Humana',			type: 'Insurance Company',			billingPerson: 'Hugo Weaving'		},	],	Patient: [		{			ID: generateUUID(),			practice: 0,			firstName: 'Sean',			middleName: '',			lastName: 'Bean',			suffix: '',			dateOfBirth: '1/23/1945',			gender: 'Male'		},		{			ID: generateUUID(),			practice: 0,			firstName: 'Dominic',			middleName: '',			lastName: 'Monaghan',			suffix: '',			dateOfBirth: '2/21/1962',			gender: 'Male'		},		{			ID: generateUUID(),			practice: 0,			firstName: 'William',			middleName: '',			lastName: 'Boyd',			suffix: '',			dateOfBirth: '5/1/1958',			gender: 'Male'		},		{			ID: generateUUID(),			practice: 0,			firstName: 'Miranda',			middleName: '',			lastName: 'Otto',			suffix: '',			dateOfBirth: '10/1/1978',			gender: 'Female'		},		{			ID: generateUUID(),			practice: 0,			firstName: 'Bernard',			middleName: '',			lastName: 'Hill',			suffix: '',			dateOfBirth: '12/23/1949',			gender: 'Male'		},		{			ID: generateUUID(),			practice: 0,			firstName: 'Sarah',			middleName: '',			lastName: 'McLeod',			suffix: '',			dateOfBirth: '10/3/1975',			gender: 'Feale'		},		{			ID: generateUUID(),			practice: 0,			firstName: 'Robyn',			middleName: '',			lastName: 'Malcolm',			suffix: '',			dateOfBirth: '8/8/1988',			gender: 'Feale'		},		{			ID: generateUUID(),			practice: 0,			firstName: 'Bradley',			middleName: '',			lastName: 'Dourif',			suffix: '',			dateOfBirth: '4/20/1960',			gender: 'Male'		},		{			ID: generateUUID(),			practice: 0,			firstName: 'Ian',			middleName: '',			lastName: 'Holm',			suffix: '',			dateOfBirth: '9/2/1934',			gender: 'Male'		},		{			ID: generateUUID(),			practice: 0,			firstName: 'Karl',			middleName: '',			lastName: 'Urban',			suffix: '',			dateOfBirth: '5/9/1972',			gender: 'Male'		}	],	Assay:[		{			ID: generateUUID(),			name: 'Ansh ProProtect® 1000',			manufacturer: 0,			cpt: 28,			currentSalesPrice: 13.17,			lotSize: 1000,			redMax: 100,			greenMax: 80,			greenMin: 50,			redMin: 30,			domain: 0.1,			range: 150,			curveType: 'pow',			factorType: 'exponent',			factor: 0.1		},		{			ID: generateUUID(),			name: 'Ansh RBCPower® XL',			manufacturer: 0,			cpt: 28,			currentSalesPrice: 23.5,			lotSize: 300,			redMax: 130,			greenMax: 130,			greenMin: 50,			redMin: 50,			domain: 0.1,			range: 150,			curveType: 'pow',			factorType: 'exponent',			factor: 0.2		},		{			ID: generateUUID(),			name: 'SpeculaVisio® X12',			manufacturer: 1,			cpt: 2,			currentSalesPrice: 71,			lotSize: 80,			redMax: 90,			greenMax: 80,			greenMin: 70,			redMin: 60,			domain: 0.1,			range: 125,			curveType: 'pow',			factorType: 'exponent',			factor: 0.3		},		{			ID: generateUUID(),			name: 'CloseLook™ Immunoassay',			manufacturer: 2,			cpt: 8,			currentSalesPrice: 45.6,			lotSize: 100,			redMax: 140,			greenMax: 130,			greenMin: 20,			redMin: 10,			domain: 0.1,			range: 150,			curveType: 'pow',			factorType: 'exponent',			factor: 0.4		},		{			ID: generateUUID(),			name: 'BigBen® Macrotest',			manufacturer: 3,			cpt: 41,			currentSalesPrice: 1182,			lotSize: 20,			redMax: 40,			greenMax: 40,			greenMin: 30,			redMin: 30,			domain: 0.1,			range: 100,			curveType: 'pow',			factorType: 'exponent',			factor: 0.6		},		{			ID: generateUUID(),			name: 'Uh-Oh-Oh-No™ Test System',			manufacturer: 3,			cpt: 101,			currentSalesPrice: 23.51,			lotSize: 250,			redMax: 800,			greenMax: 700,			greenMin: 200,			redMin: 200,			domain: 0.1,			range: 1200,			curveType: 'pow',			factorType: 'exponent',			factor: 0.9		},		{			ID: generateUUID(),			name: 'Futuro 2001™',			manufacturer: 3,			cpt: 28,			currentSalesPrice: 3.57,			lotSize: 100,			redMax: 1000,			greenMax: 75,			greenMin: 50,			redMin: 25,			domain: 0.1,			range: 125,			curveType: 'pow',			factorType: 'exponent',			factor: 1.5		},		{			ID: generateUUID(),			name: 'BroadTest™ 9234',			manufacturer: 4,			cpt: 28,			currentSalesPrice: 7.3,			lotSize: 1000,			redMax: 90,			greenMax: 80,			greenMin: 40,			redMin: 30,			domain: 0.1,			range: 150,			curveType: 'linear'		},		{			ID: generateUUID(),			name: 'Piccolo System 2880',			manufacturer: 5,			cpt: 28,			currentSalesPrice: 27.35,			lotSize: 200,			redMax: 1000,			greenMax: 80,			greenMin: 50,			redMin: 30,			domain: 0.1,			range: 150,			curveType: 'linear'		},		{			ID: generateUUID(),			name: 'HHGTG-042',			manufacturer: 6,			cpt: 28,			currentSalesPrice: 36,			lotSize: 100,			redMax: 10,			greenMax: 8,			greenMin: 5.5,			redMin: 3.5,			domain: 0.1,			range: 15,			curveType: 'pow',			factorType: 'exponent',			factor: 2.3		}	],	DeviceModel: [		{			ID: generateUUID(),			name: 'Tricorder 1000'		},		{			ID: generateUUID(),			name: 'Odyssey 2001'		},		{			ID: generateUUID(),			name: 'BreviTest 4200'		}	],	Device: [		{			ID: generateUUID(),			serialNumber: 'HADK-KIMS-PIEL-NAIR',			practice: 0,			purchasedOn: '4/12/2014',			manufacturedOn: '4/1/2014',			shippedOn: '4/15/2014',			registeredOn: '4/28/2014',			deviceModel: 0		},		{			ID: generateUUID(),			serialNumber: 'IQWE-OMGA-NCIP-INKA',			practice: 0,			purchasedOn: '4/9/2014',			manufacturedOn: '4/1/2014',			shippedOn: '4/12/2014',			deviceModel: 0		},		{			ID: generateUUID(),			serialNumber: 'LOBN-OANB-MLAI-YQNB',			practice: 0,			purchasedOn: '3/30/2014',			manufacturedOn: '4/1/2014',			shippedOn: '4/22/2014',			registeredOn: '5/2/2014',			deviceModel: 1		},		{			ID: generateUUID(),			serialNumber: 'OBAD-BWUG-NCPA-WIAF',			practice: 0,			purchasedOn: '4/10/2014',			manufacturedOn: '4/15/2014',			shippedOn: '4/30/2014',			deviceModel: 2		},		{			ID: generateUUID(),			serialNumber: 'AMBZ-GHWK-PQLV-INDI',			practice: 0,			purchasedOn: '4/1/2014',			manufacturedOn: '4/15/2014',			shippedOn: '4/18/2014',			deviceModel: 2		},		{			ID: generateUUID(),			serialNumber: 'IGAE-MBKA-UEKF-JSIF',			practice: 0,			purchasedOn: '4/11/2014',			manufacturedOn: '4/15/2014',			shippedOn: '4/27/2014',			deviceModel: 2		},	]};var cptID = [];function importCPTCodes(importfile) {	var lines = loadText(importfile).split("\r");	var columns = [];	ds.CPT.all().remove();	lines.forEach(		function(oneLine) {			var cpt = ds.CPT.createEntity();			columns = oneLine.split('\t');			cpt.code = columns[0];			cpt.description = columns[1];			cpt.save();			cptID.push(cpt.ID);         }	);}function loadEntity(className, entity, obj) {	var k = Object.keys(obj);	k.forEach(		function(attr) {			var relClass, relID, relIndx;						if (attr === 'cpt') {				entity[attr] = ds.CPT(cptID[obj[attr]]);			}			else {				if (ds[className][attr].relatedDataClass) {					relClass = ds[className][attr].relatedDataClass.getName();					relIndx = obj[attr];					relID = data[relClass][relIndx].ID;					entity[attr] = ds[relClass](relID);				}				else {					if (ds[className][attr].type === 'date') {						entity[attr] = new Date(obj[attr]);					}					else {						entity[attr] = obj[attr];					}				}			}		}	);}function loadDataClass(className) {	var collect, dataClass;		dataClass = ds[className];	dataClass.all().remove();	collect = data[className];	collect.forEach(		function(obj) {			var entity = dataClass.createEntity();			loadEntity(className, entity, obj);			entity.save();		}	);}function reloadDatastore() {	importCPTCodes(getFolder('path') + 'Import Data/CPT Codes.tab');	data.classes.forEach(		function(c) {			loadDataClass(c);		}	);	ds.Prescription.all().remove();	ds.Test.all().remove();	ds.Cartridge.all().remove();	ds.Order.all().remove();	ds.OrderItem.all().remove();	ds.Shipment.all().remove();	ds.Assay.forEach(function(a) {		model.Cartridge.methods.manufacture(			{				assayID: a.ID,				quantity: 10			}		);	});}//reloadDatastore();