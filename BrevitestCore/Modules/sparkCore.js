/*	Handler function for service messages (required)*/var L3 = require('L3');var sparkURL = "https://api.spark.io/v1/";function getAccessToken(coreID) {	return 'd050d3f69e0b4107f477e9cadb581e43d3f33340';};exports.postMessage = function (message) {	if (message.name === 'applicationWillStart') {		/* 	This is the first message sent to the service.			It's a good location to initialize and start the service */	}	else if (message.name === 'applicationWillStop') {		/*	The service should be stopped and ended here */	}	else if (message.name === 'httpServerDidStart') {		/*	This message should be handled if the service depends on the HTTP Server status */	}	else if (message.name === 'httpServerWillStop') {		/*	This message should be handled if the service depends on the HTTP Server status */	}	else if (message.name === 'catalogWillReload') {		/*	This message should be handled if the service depends on the Model and uses the 'ds' property */	}	else if (message.name === 'catalogDidReload') {		/*	This message should be handled if the service depends on the Model and uses the 'ds' property */	}	};/*	The application storage can be used to store private data.	The service data is accessed as follows: var serviceDatas = storage.getItem('services').sparkCore;		In the same way, the application setting's storage contains the service settings, which are usually defined in the project's settings file.	The service settings are accessed as follows: var serviceSettings = settings.getItem('services').sparkCore;		For more information, refer to http://doc.wakanda.org/Wakanda Studio0.2/help/Title/en/page3326.html*/exports.writeSerialNumber = function writeSerialNumber(coreID, serialNumber) {	var accessToken = getAccessToken(coreID);    var result = L3.post(sparkURL + 'devices/' + coreID + '/write_serial', accessToken, { args: serialNumber });    return ({    	success: result && result.response && result.response.return_value === 0,    	result: result	});};exports.readSerialNumber = function readSerialNumber(coreID) {	var accessToken = getAccessToken(coreID);    var result = L3.get(sparkURL + 'devices/' + coreID + '/serialnumber', accessToken);    return ({		serialNumber: result.response ? result.response.result : null,		result: result	});};exports.runBrevitest = function runBrevitest(coreID) {	var accessToken = getAccessToken(coreID);    var result = L3.post(sparkURL + 'devices/' + coreID + '/run', accessToken);    return ({		testID: result.response ? result.response.result : null,		result: result	});};exports.validateCartridge = function validateCartridge(coreID) {	var accessToken = getAccessToken(coreID);    var result = L3.post(sparkURL + 'devices/' + coreID + '/validate', accessToken);    return ({		qrCodeImage: result.response ? result.response.result : null,		result: result	});};