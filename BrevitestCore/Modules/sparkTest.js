var L3 = require('L3');var secrets = require('secrets');var sparkURL = 'https://api.spark.io/v1/';var requestUUID = '';var sparkCores;var testStatusInterval;var sparkCommand = {	'write_serial_number': '00',	'initialize_device': '01',	'run_assay': '02',	'sensor_data': '03',	'change_param': '04',	'reset_params': '05',	'erase_archive': '06',	'dump_archive': '07',	'archive_size': '08',	'firmware_version': '09',	'cancel_process': '10',	'receive_BCODE': '11',	'device_ready': '12',	'calibrate': '13'};var sparkRequest = {	'serial_number': '00',	'test_record': '01',	'test_record_by_uuid': '02',	'all_params': '03',	'one_param': '04'};var brevitestParamNames = [    'step_delay_us',    'stepper_wifi_ping_rate',    'stepper_wake_delay_ms',    'solenoid_surge_power',    'solenoid_surge_period_ms',    'solenoid_sustain_power',    'sensor_params',    'sensor_ms_between_samples',    'sensor_led_power',    'sensor_led_warmup_ms'];var BCODECommands = [	{		num: '0',		name: 'Start Assay',		description: 'Starts the assay. Required to be the first command. Assay executes until Finish Assay command. Parameters are (sensor integration time, sensor gain).'	},	{		num: '1',		name: 'Delay',		description: 'Waits for specified period of time. Parameter is (delay in milliseconds).'	},	{		num: '2',		name: 'Move',		description: 'Moves the stage a specified number of steps at a specified speed. Parameters are (number of steps, step delay time in microseconds).'	},	{		num: '3',		name: 'Solenoid On',		description: 'Energizes the solenoid for a specified amount of time. Parameter is (energize period in milliseconds).'	},	{		num: '4',		name: 'Device LED On',		description: 'Turns on the device LED, which is visible outside the device. No parameters.'	},	{		num: '5',		name: 'Device LED Off',		description: 'Turns off the device LED. No parameters.'	},	{		num: '6',		name: 'Device LED Blink',		description: 'Blinks the device LED at a specified rate. Parameter is (period in milliseconds between change in LED state).'	},	{		num: '7',		name: 'Sensor LED On',		description: 'Turns on the sensor LED at a given power. Parameter is (power, from 0 to 255).'	},	{		num: '8',		name: 'Sensor LED Off',		description: 'Turns off the sensor LED. No parameters.'	},	{		num: '9',		name: 'Read Sensors',		description: 'Takes readings from the sensors. Parameters are (number of samples [1-10], milliseconds between samples).'	},	{		num: '10',		name: 'Read QR Code',		description: 'Reads the cartridge QR code. No parameters. [NOT IMPLEMENTED]'	},	{		num: '11',		name: 'Disable Sensor',		description: 'Disables the sensors, switching them to low-power mode. No parameters.'	},	{		num: '12',		name: 'Repeat Begin',		description: 'Begins a block of commands that will be repeated a specified number of times. Nesting is acceptable. Parameter is (number of interations).'	},	{		num: '13',		name: 'Repeat End',		description: 'Ends the innermost block of repeated commands. No parameters.'	},	{		num: '14',		name: 'Status',		description: 'Changes the device status register, which used in remote monitoring. Parameters are (message length, message text).'	},	{		num: '99',		name: 'Finish Assay',		description: 'Finishes the assay. Required to be the final command. No parameters.'	}];	var brevitestParam = {};brevitestParamNames.forEach(	function (e, i) {		var s = (4 * i).toString();		brevitestParam[e] = L3.zeropad(s, 3);	});var sparkSensorHeader = 'S\t n\t       sensor read time       \t  C  \t  R  \t  G  \t  B\n\n';////  BCODE FUNCTIONS//function convert_code_to_command(code) {	var cmd = '';	for (i = 0; i < BCODECommands.length; i += 1) {		if (BCODECommands[i].num === code) {			cmd = BCODECommands[i].name;			break;		}	}	return cmd;}function convert_BCODE_string(str) {	var c, cmd, i, indx, p;	var a = '';		if (str) {		cmd = str.split('\n');				for (i = 0; i < cmd.length; i += 1) {			if (cmd[i]) {				indx = cmd[i].indexOf(',');				if (indx === -1) {					c = cmd[i];					p = '';				}				else {					c = cmd[i].substr(0, indx);					p = cmd[i].substr(indx + 1);				}				c = convert_code_to_command(c);				a += c + Array(14 - c.length).join(' ') + '\t' + p + '\n';			}		}	}		return a;}function instruction_time(code, param) {	var p, d = 0;		switch(code) {		case '1': // delay		case '3': // solenoid on		case '6': // blink device LED			d = parseInt(param[0]);			break;		case '2': // move			d = Math.floor(parseInt(param[0]) * parseInt(param[1]) / 1000);			break;		case '9': // read sensor			d = Math.floor(parseInt(param[0]) * parseInt(param[1]));			break;		case '99': // finish			d = 16800;			break;	}		return d;}function get_bcode_object(bcode) {	var c, p;	var indx = bcode.indexOf(',');		if (indx === -1) {		c = bcode;		p = '';	}	else {		c = bcode.substr(0, indx);		p = bcode.substr(indx + 1).split(',');	}		return ({ c: c, p: p });}function calculate_BCODE_time(bcode_array) {	var a, b, i, level, t;	var duration = 0;		for (i = 0; i < bcode_array.length; i += 1) {		if (bcode_array[i]) {			b = get_bcode_object(bcode_array[i]);			switch(b.c) {				case '99': // finished				case '13': // end repeat					return (duration + instruction_time(b.c, b.p));				case '':					break;				case '12': // start repeat					a = [];					level = 1;					do {						i += 1;						if (i === bcode_array.length) {							return -1;						}						t = get_bcode_object(bcode_array[i]);						if (t.c === '12') {							level += 1;						}						if (t.c === '13') {							level -= 1;						}						a.push(bcode_array[i]);					} while(!(t.c === '13' && level === 0));										duration += calculate_BCODE_time(a) * parseInt(b.p[0]);					break;				default:					duration += instruction_time(b.c, b.p);			}		}	}		return -1;}function BCODE_duration(str) {	var a = [];	var duration = 0;		if (str) {		duration = calculate_BCODE_time(str.split('\n'));	}		return (duration / 1000);}	////  UTLITY FUNCTIONS//function create_attribute_data(valueStr) {	var attrObj = [];	var attrValues = [];	var i;	attrValues = valueStr.split(',');	for (i = 0; i < attrValues.length; i += 1) {		attrObj.push(			{				'id': i + 1,				'name': brevitestParamNames[i],				'value': parseInt(attrValues[i])			}		);	}	return attrObj;}function parse_sensor_reading(str) {	var data = str.split('\t');	var result = (data[0] === 'A' ? 'Assay' : 'Control') + '\t';	result += data[1] + '\t';	result += L3.string_to_datetime_string(data[2]) + '\t';	result += data[3] + '\t';	result += data[4] + '\t';	result += data[5] + '\t';	result += data[6] + '\n';	return result;}function parse_test_header(str) {	var data = str.split('\t');	var result = 'TEST INFORMATION\n';	result += 'Record number: ' + data[0] + '\n';	result += 'Test start time: ' + L3.string_to_datetime_string(data[1]) + '\n';	result += 'Test finish time: ' + L3.string_to_datetime_string(data[2]) + '\n';	result += 'Test UUID: ' + data[3] + '\n';	result += 'Number of sensor samples: ' + data[4] + '\n';	result += 'BCODE version: ' + data[5] + '\n';	result += 'BCODE length: ' + data[6] + '\n';	result += '\n';	return result;		}function parse_test_params(str) {	var data = str.split('\t');	var result = 'DEVICE PARAMETERS\n';	result += 'step_delay_us: ' + data[0] + '\n';	result += 'stepper_wifi_ping_rate: ' + data[1] + '\n';	result += 'stepper_wake_delay_ms: ' + data[2] + '\n';	result += 'solenoid_surge_power: ' + data[3] + '\n';	result += 'solenoid_surge_period_ms: ' + data[4] + '\n';	result += 'solenoid_sustain_power: ' + data[5] + '\n';	result += 'sensor_params: ' + parseInt(data[6], 16).toString() + '\n';	result += 'sensor_ms_between_samples: ' + data[7] + '\n';	result += 'sensor_led_power: ' + data[8] + '\n';	result += 'sensor_led_warmup_ms: ' + data[9] + '\n';	result += '\n';	return result;		}function parse_test_data(test_str) {	var attr, i, i2, num_samples;	var data = test_str.split('\n');	var result = parse_test_header(data[0]);		result += parse_test_params(data[1]);		result += 'BCODE COMMANDS\n';	i = 1;	do {		i += 1;		result += convert_BCODE_string(data[i]);	} while (data[i].substr(0, 2) !== '99') ;		result += '\nSENSOR READINGS\n';	result += sparkSensorHeader;	num_samples = parseInt(test_str.substr(61, 3));	i2 = i + 1;	for (i = 0; i < (2 * num_samples); i += 1) {		result += parse_sensor_reading(data[i2 + i]);	}	return result;}function push_sensor_data(data, str) {	data.push(sparkDataHeader);	for (i = 0; i < 20; i += 1) {		data.push(parse_sensor_data(str.substr(31 * i, 31)));	}	return data;}/////////////////////////////////////////////////////////////////////////////                                                                       ////                         EXPOSED FUNCTIONS                             ////                                                                       /////////////////////////////////////////////////////////////////////////////////   REQUESTS//exports.request_test_data = function request_test_data(coreID, num) {	return ({ success: true, value: '', message: 'Fake test data by num' });};exports.request_test_data_by_uuid = function request_test_data_by_uuid(coreID, uuid) {	return ({ success: true, value: '', message: 'Fake test data by uuid' });};exports.request_parameter = function request_parameter(coreID, paramName) {	return ({ success: true, value: '', message: 'Fake parameter retrieved' });};exports.request_all_parameters = function request_all_parameters(coreID) {	return ({ success: true, response: [], message: 'Fake parameters retrieved' });};////  COMMANDS//exports.initialize_device = function initialize_device(coreID) {	return ({ success: true, message: 'Fake device ready to run test' });};exports.run_test = function run_test(coreID, uuid, BCODE) {	return ({ success: true, message: 'Fake test started' });};exports.collect_sensor_data = function collect_sensor_data(coreID) {	return ({ success: true, value: '', message: 'Fake senosr data collected' });};exports.change_parameter = function change_parameter(coreID, paramName, paramValue) {	return ({ success: true, value: '', message: 'Fake parameter changed' });};exports.reset_parameters = function reset_parameters(coreID) {	return ({ success: true, value: '', message: 'Parameters reset' });};exports.get_core_list = function get_core_list() {	return ({ success: true, response: [], message: 'Fake core list retrieved' });};exports.get_core_status = function get_core_status(coreID) {	return ({ success: true, value: '' });};exports.get_status = function get_status(coreID) {	return ({ success: true, value: 'Fake status' });};exports.test_running = function test_running(coreID) {	return ({ success: true, value: '0123456789ABCDEF0123456789ABCDEF' });};exports.erase_archived_data = function erase_archived_data(coreID) {	return ({ success: false });};exports.dump_archived_data = function dump_archived_data(coreID, quantity) {	return ({ success: false });};exports.get_archive_size = function get_archive_size(coreID) {	return ({ success: true, response: {return_value: 2} });};exports.get_firmware_version = function get_firmware_version(coreID) {	return ({ success: true, response: {return_value: 9} });};exports.cancel_process = function cancel_process(coreID) {	return ({ success: true, message: 'Process cancelled' });};exports.ready_to_run_assay = function ready_to_run_assay(coreID) {	return ({ success: true });};exports.write_serial_number = function write_serial_number(coreID, serialNumber) {	return ({ success: true, serial_number: serialNumber });};exports.read_serial_number = function read_serial_number(coreID) {	return ({ success: true, serial_number: 'AAAA-BBBB-CCCC-DDDD' });};exports.set_and_move_to_calibration_point = function set_and_move_to_calibration_point(coreID, calibrationSteps) {	return ({ success: true, message: 'Device set at calibration point' });};exports.get_BCODE_commands = function get_BCODE_commands(str) {	return ( {success: true, commands: BCODECommands} );};exports.get_BCODE_duration = function get_BCODE_commands(BCODE) {	return BCODE_duration(BCODE);};exports.get_test_percent_complete = function get_test_percent_complete(coreID) {	return get_spark_variable(coreID, 'percentdone');}exports.initialize_database = function initialize_database() {	L3.initialize_database();	return ( {success: true} );};