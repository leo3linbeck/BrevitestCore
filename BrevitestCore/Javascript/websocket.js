...var devices = [];var users = [];onmessage = function(message) {}onconnect = function(event) { //Called each time a new client is connected	var i;	var firstMessage = true;	var initialMsg = 'INIT:SERVER:Brevitest v0.1';	var echoMsg = 'ECHO:';    var ws = event.ports[0]; //Access to the WebSocket client object.                // Undefined if shared worker is called from SSJS server.        ws.uuid = generateUUID();    	ws.onmessage = function(message) {		//Called each time a client sends a message		var msgArray = message ? (message.data ? message.data.toString().split(":") : []) : [];		var resultArray = [];		var result = '';				console.log('onmessage invoked', message, ws);				switch(msgArray[0].toUpperCase()) {			case 'INIT':				if (firstMessage) {					firstMessage &= false;					if (msgArray[1].toUpperCase() === 'DEVICE') {						devices.push({							uuid: ws.uuid,							serialNumber: msgArray[2],							websocket: ws						});						ws.clientType = 'Device';						ws.postMessage(initialMsg);					}					else {						if (msgArray[1].toUpperCase() === 'USER') {							users.push({								uuid: ws.uuid,								username: msgArray[2],								websocket: ws							});							ws.clientType = 'User';							ws.postMessage(initialMsg);						}						else {							ws.postMessage('INIT:FAIL:Must be device or user');							ws.close();						}					}				}				else {					ws.postMessage('INIT:FAIL:Must be first message');				}				break;			case 'PING':				ws.postMessage('PONG');				break;			case 'EXIT':				ws.close();				break;			case 'MESSAGE':				msgArray.splice(0, 1);				if (msgArray[0].toUpperCase() === 'DEVICE') {					sendDeviceMessage(msgArray);				}				if (msgArray[0].toUpperCase() === 'USER') {					sendUserMessage(msgArray);				}				break;			case 'USERLIST':				resultArray = [];				for (i = 0; i < users.length; i += 1) {					resultArray.push(users[i].username);				}				result = 'USERLIST:' + resultArray.join(', ');				ws.postMessage(result);				break;			case 'DEVICELIST':				resultArray = [];				for (i = 0; i < devices.length; i += 1) {					resultArray.push(devices[i].serialNumber);				}				result = 'DEVICELIST:' + resultArray.join(', ');				ws.postMessage(result);				break;			default:				ws.postMessage(msgArray[0].toUpperCase() + ':Command not found');		}    };        ws.onerror = function(error) {		console.log('onerror invoked', ws);    };    	ws.onclose = function(event) {		var i;		console.log('Closing websocket', event);		if (this.clientType === 'Device') {			for (i = 0; i < devices.length; i += 1) {				if (devices[i].uuid === this.uuid) {					devices.splice(i, 1);					break;				}			}		}		if (this.clientType === 'User') {			for (i = 0; i < users.length; i += 1) {				if (users[i].uuid === this.uuid) {					users.splice(i, 1);					break;				}			}		}	};	};function sendDeviceMessage(a) {	var i, result;		a.splice(0, 1);		if (a[0] === 'ALL') {		a.splice(0, 1);		result = a.join(':');		for (i = 0; i < devices.length; i += 1) {			devices[i].websocket.postMessage(result);		}	}	else {		for (i = 0; i < devices.length; i += 1) {			if (devices[i].serialNumber === a[0]) {				a.splice(0, 1);				result = a.join(':');				devices[i].websocket.postMessage(result);				break;				}		}	}}function sendUserMessage(a) {	var i, result;		a.splice(0, 1);		if (a[0].toUpperCase() === 'ALL') {		a.splice(0, 1);		result = a.join(':');		for (i = 0; i < users.length; i += 1) {			users[i].websocket.postMessage(result);		}	}	else {		for (i = 0; i < users.length; i += 1) {			if (users[i].username === a[0]) {				a.splice(0, 1);				result = a.join(':');				users[i].websocket.postMessage(result);				break;				}		}	}}